1. Почему в большинстве ситуаций стоит использовать flexbox-позиционирование?
Потому, что flexbox обладает гибкостью расположения элементов, то есть, с помощью его свойств можно легко настроить расположение элементов в контейнере в зависимости от их размеров и количества, а также, еще одна особенность flexbox - вложенность - flexbox позволяет создавать вложенные контейнеры и управлять расположением элементов внутри каждого из них.
2. Самостоятельно изучи способ позиционирования через `display: table`  и ответьте на вопрос, для каких ситуаций оно лучше всего подходит?
Для создания таблиц, однако этот способ позиционирования считается устаревшим. 
3. Какие есть оси во флекс-верстке и как задается их направление?
Главная (слева направо) и поперечная (сверху вниз). По умолчанию flex-элементы внутри контейнера отображаются в ряд слева направо в том порядке, в каком они прописаны в коде HTML-документа. Направление главной оси можно изменить, осуществляется это с помощью CSS-свойства flex-direction. Его возможные значения: column — колонка, column-reverse — колонка в обратном порядке, row — обычный ряд и row-reverse — ряд в обратном порядке 
4. Разберитесь, как работает свойство `margin: auto` во флекс-верстке, приведите пример использования
Свойство margin: auto в контексте флекс-верстки является инструментом для центрирования элементов по оси гибкого контейнера. Оно позволяет автоматически распределять свободное пространство вокруг элемента, что создает эффект центрирования элемента в контейнере. Это свойство удобно использовать при создания адаптивного дизайна и выравнивании элементов на странице.
5. В чем преимущества `box-sizing`?
Применяется для изменения алгоритма расчёта ширины и высоты элемента. Согласно спецификации CSS ширина блока складывается из ширины содержимого (width), значений margin, padding и border. Аналогично обстоит и с высотой блока. Свойство box-sizing позволяет изменить этот алгоритм, чтобы свойства width и height задавали размеры не содержимого, а размеры блока.
6. Чем отличается `flex-grow` от `flex-shrink`?
Если свойство flex-grow помогает нам распределить свободное пространство между элементами, то flex-shrink помогает распределить пространство, если места в контейнере недостаточно. 
7. Как можно добиться следующего позиционирования элементов:
justify content: space-between.
8. Какой в итоге будет размер у элемента (можно округлить)? 
148.523 * 17.807
9. Самостоятельно разберись, зачем нужно свойство `order`?
Свойство order отвечает за порядок расположения элементов внутри контейнера. Это удобная функция, позволяющая, например, перемещать элементы внутри контейнера при открытии страницы на разных устройствах.
10. Каким кодом можно сделать такую таблицу?

11. Как рассчитывается размер flex-контейнера?
Размер flex-контейнера рассчитывается на основе заданных размеров элементов и свойств flex-grow, flex-shrink и flex-basis.